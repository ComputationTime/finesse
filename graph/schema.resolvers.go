package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"

	"github.com/ComputationTime/finesse-api/database"
	"github.com/ComputationTime/finesse-api/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user model.User
	user.Email = input.Email
	user.Password = input.Password
	return "worked!", nil
}

// CreateNContent is the resolver for the createNContent field.
func (r *mutationResolver) CreateNContent(ctx context.Context, input model.NewContentArray) (string, error) {
	// out, err := database.CreateNContent(input.Array)
	return "", nil
}

// CreateContent is the resolver for the createContent field.
func (r *mutationResolver) CreateContent(ctx context.Context, input model.NewContent) (string, error) {
	err := database.CreateContent(input.Source, input.URL)
	return "", err
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.Login) (string, error) {
	return "token", nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input *model.RefreshToken) (string, error) {
	return "token", nil
}

// Content is the resolver for the content field.
func (r *queryResolver) Content(ctx context.Context, num *int) ([]*model.Content, error) {
	a, b := database.GetContent(*num)
	return a, b
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
